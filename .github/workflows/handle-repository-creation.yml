name: Handle Repository Request

on:
  workflow_call:
    inputs:
      visibility:
        description: Repository Visibility
        required: true
        type: string

env:
  USER: ${{ github.event.issue.user.login }}

permissions:
  contents: read
  actions: write
  issues: write

jobs:
  notify:
    name: "Create Repository"
    runs-on: ubuntu-latest
    environment: repositories
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
      - name: Get Token
        uses: actions/create-github-app-token@v1
        id: app-token
        with:
          app-id: ${{ vars.OCTODESK_APP_ID }}
          private-key: ${{ secrets.OCTODESK_PRIVATE_KEY }}
          owner: ${{ github.repository_owner }}
      - name: Add In Progress Comment To Issue
        uses: ./.github/actions/issue-comment
        with:
          message: "@${USER} a [workflow]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID) was started to handle your request"
      - name: Parse Issue Form into JSON
        id: parse
        uses: zentered/issue-forms-body-parser@v2.2.0
      - name: Get Attributes from Form
        id: issue-values
        env:
          JSON: ${{ steps.parse.outputs.data }}
          LC_ALL: "C"
        run: |
          function github_name() {
            echo $1 \
            | tr '[:upper:]' '[:lower:]' \
            | sed -r 's/[\t ]+/-/g' \
            | sed -r 's/[^a-z0-9ß-ü\-]+/-/g' \
            | sed -e 's/ä/ae/g' -e 's/ö/oe/g' -e 's/ü/ue/g' -e 's/ß/ss/g' \
            | sed -r 's/[-]+/-/g' \
            | sed -r 's/^[-]//' \
            | sed -r 's/[-]$//'
          }
          function github_name_array() {
            array=""
            for item in $(echo $1 | tr " " "-" | tr "," " "); do
              array+="$(github_name $item),"
            done
            echo $array | sed 's/.$//'
          }
          NAME=$(github_name "$(echo $JSON | jq -r '.name.text')")
          TEAM=$(github_name "$(echo $JSON | jq -r '.team.text' | sed -E 's/ -.*//')")
          ORG=$($github_name "$(echo $JSON | jq -r '.organization.text')")
          echo "repo_name=${NAME}" >> "$GITHUB_OUTPUT"
          echo "team_name=${TEAM}" >> "$GITHUB_OUTPUT"
          echo "org_name=${ORG}" >> "$GITHUB_OUTPUT"

      - name: Apply Naming Convention
        id: repo-naming-convention
        run: |
          # Check if repo_name, team_name, or org_name are null or empty
          if [[ -z "${{ steps.issue-values.outputs.repo_name }}" ]]; then
            echo "Error: repo_name is null or empty"
            exit 1
          fi
          if [[ -z "${{ steps.issue-values.outputs.team_name }}" ]]; then
            echo "Error: team_name is null or empty"
            exit 1
          fi
          if [[ -z "${{ steps.issue-values.outputs.org_name }}" ]]; then
            echo "Error: org_name is null or empty"
            exit 1
          fi  

          # Install yq to parse YAML files
          sudo snap install yq
      
          # map the team name to the team abbreviation
          team_abbr=$(yq e '.team."${{ steps.issue-values.outputs.team_name }}"' "${{ github.workspace }}/config/naming-convention.yml")
          if [[ -z "${team_abbr}" ]]; then
            echo "Error: No mapping found for team name"
            exit 1
          fi

          # map the organization name to the organization abbreviation
          org_abbr=$(yq e '.organization."${{ steps.issue-values.outputs.org_name }}"' "${{ github.workspace }}/config/naming-convention.yml")
          if [[ -z "${org_abbr}" ]]; then
            echo "Error: No mapping found for organization name"
            exit 1
          fi
      
          final_name="${org_abbr}-${team_abbr}-${{ steps.issue-values.outputs.repo_name }}"
          echo "repo_name=${final_name}" >> "$GITHUB_ENV"


      - name: Create Repository
        id: create-repo
        uses: ./.github/actions/repository-create
        with:
          repo-name: ${{ steps.repo-naming-convention.outputs.repo_name }}
          team-name: ${{ steps.repo-naming-convention.outputs.team_name }}
          visibility: ${{ inputs.visibility }}
          token: ${{ steps.app-token.outputs.token }}
      - name: Add team to repository
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          REPO_OWNER: ${{ github.repository_owner }}
          REPO_NAME: ${{ steps.issue-values.outputs.repo_name }}
          TEAM_NAME: ${{ steps.issue-values.outputs.team_name }}
        run: |
          team_id=$(gh api \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /orgs/$REPO_OWNER/teams/$TEAM_NAME | jq -r '.id')
          if [ -n "$team_id" ]; then
            gh api \
            --method PUT \
            -H "Accept: application/vnd.github+json" \
            -H "X-GitHub-Api-Version: 2022-11-28" \
            /orgs/$REPO_OWNER/teams/$TEAM_NAME/repos/$REPO_OWNER/$REPO_NAME
          else
            echo ::error title={title}::{"Team not found"}
          fi
      - name: Add Failure Comment To Issue
        if: failure()
        uses: ./.github/actions/issue-comment
        with:
          message: "@${USER} the repository provisioning failed...check the [workflow]($GITHUB_SERVER_URL/$GITHUB_REPOSITORY/actions/runs/$GITHUB_RUN_ID) for details."
      - name: Close Issue With Success Comment
        if: success()
        uses: ./.github/actions/issue-close
        env:
          REPO_URL: ${{ steps.create-repo.outputs.repo-url }}
        with:
          message: "@${USER} your repository was created and is now accessible here: ${REPO_URL}"
